@inherits CodeBehind.PuzzleBoxBase
@using Bitmasks

@{
    var given = IsGiven ? "given" : null;

    var boundaryNorth = (Boundary & BoundaryBitmask.North) != BoundaryBitmask.None
        ? "boundary-north" : null;
    var boundaryEast = (Boundary & BoundaryBitmask.East) != BoundaryBitmask.None
        ? "boundary-east" : null;
    var boundarySouth = (Boundary & BoundaryBitmask.South) != BoundaryBitmask.None
        ? "boundary-south" : null;
    var boundaryWest = (Boundary & BoundaryBitmask.West) != BoundaryBitmask.None
        ? "boundary-west" : null;

    var conflicted = IsConflicted ? "conflicted" : null;
    var boundaryConflicted = IsBoundaryConflicted ? "boundary-conflicted" : null;
}

<td>
    <div class="box
         @given
         @boundaryNorth @boundaryEast @boundarySouth @boundaryWest
         @boundaryConflicted @conflicted" id="box-@ID"
         @onkeypress="(e) => Box_KeyPress(e)" tabindex="0">

        <div class="value">@Value</div>

        @if (KillerCageBoundary != CageBitmask.None)
        {
            <KillerCage Elements="KillerCageBoundary" ShowSum="ShowKillerSum" Sum="KillerSum" IsConflicted="IsKillerCageConflicted" />
        }

        <div class="helper-value">@HelperValue</div>
        <table class="helpers">
            <tbody>
                @for (var row = 0; row < 3; ++row)
                {
                    <tr>
                        @for (var column = 0; column < 3; ++column)
                        {
                            var digit = row * 3 + column + 1;

                            <td class="helper" id="helper-@row"
                                @onmouseover="() => Helper_MouseOver(digit)"
                                @onmouseout="Helper_MouseOut"
                                @onclick="() => Helper_Click(digit)">
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</td>